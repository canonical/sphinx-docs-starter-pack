.. _create-data-tables:

Create data tables
===================

The starter pack can render comma-separated values (CSV) data as tables.

For other types of table, see :ref:`tables in reStructuredText <style-guide-tables>` and :ref:`tables in MyST <myst_style_guide_tables>`.

Create a table from inline data
-------------------------------

If you have a small amount of CSV data, you can include the data in the doc source. For example:

.. tab-set::

   .. tab-item:: Table

      .. csv-table::
         :header: "Animal", "Number of legs", "Size"

         "Worm", 0, "Small"
         "Penguin", 2, "Medium"
         "Horse", 4, "Large"
         "Ant", 6, "Small"
         "Octopus", 8, "Medium"

   .. tab-item:: reST

      .. code-block:: rst

         .. csv-table::
            :header: "Animal", "Number of legs", "Size"

            "Worm", 0, "Small"
            "Penguin", 2, "Medium"
            "Horse", 4, "Large"
            "Ant", 6, "Small"
            "Octopus", 8, "Medium"

      If the table needs it, customize the column widths, character encoding, and so on, as described in the `csv-table reference`_.

   .. tab-item:: MyST

      .. code-block:: none

         ```{csv-table}
         :header: "Animal", "Number of legs", "Size"

         "Worm", 0, "Small"
         "Penguin", 2, "Medium"
         "Horse", 4, "Large"
         "Ant", 6, "Small"
         "Octopus", 8, "Medium"
         ```

      If the table needs it, customize the column widths, character encoding, and so on, as described in the `csv-table reference (MyST)`_.

Create a table from a CSV file
------------------------------

If you have a large amount of CSV data, or the data is generated by an automated process, you can include the data from a file. For example:

.. tab-set::

   .. tab-item:: Table

      .. csv-table::
         :header: "Animal", "Number of legs", "Size"

         "Worm", 0, "Small"
         "Penguin", 2, "Medium"
         "Horse", 4, "Large"
         "Ant", 6, "Small"
         "Octopus", 8, "Medium"

   .. tab-item:: reST

      .. code-block:: rst

         .. csv-table::
            :file: /reuse/animals.csv
            :header-rows: 1

   .. tab-item:: MyST

      .. code-block:: none

         ```{csv-table}
         :file: /reuse/animals.csv
         :header-rows: 1
         ```

   .. tab-item:: ``docs/reuse/animals.csv``

      .. code-block:: none

         "Animal", "Number of legs", "Size"
         "Worm", 0, "Small"
         "Penguin", 2, "Medium"
         "Horse", 4, "Large"
         "Ant", 6, "Small"
         "Octopus", 8, "Medium"

Create an interactive table
---------------------------

The `Sphinx DataTables`_ extenstion enables your tables to become interactive. Your readers will be able to sort columns and filter rows. For examples, see the extension's documentation.

The extension isn't available by default in the starter pack.

To include the extension in your documentation, add ``sphinx-datatables`` to ``docs/requirements.txt``. Then add ``sphinx_datatables`` to the ``extensions`` list in ``docs/conf.py``.

After including the extension, use the ``sphinx-datatable`` class to make tables interactive. For example:

.. tab-set::

   .. tab-item:: reST

      .. code-block:: rst

         .. csv-table::
            :class: sphinx-datatable
            :file: /reuse/animals.csv
            :header-rows: 1

   .. tab-item:: MyST

      .. code-block:: none

         ```{csv-table}
         :class: sphinx-datatable
         :file: /reuse/animals.csv
         :header-rows: 1
         ```
